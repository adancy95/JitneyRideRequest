@model JitneyRideRequest.Models.RideRequestViewModel.AddRequestViewModel

    <style>
        #map{
            height: 700px;
            width: 100%;
        }
     
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0 !important;
            padding: 0 !important;
        }

        


        .request {
            margin: 0 !important;
            padding: 0 !important;
            background-color: #292b2c;
            color: white;

        }

        .formsize{
            margin: 1%;
        }

        .fullmap{
            padding: 0 !important;
            margin: 0 !important;
        }


        .removepadding {
            margin: 0 !important;
            padding: 0 !important;
        }


    </style>




<div class="row ">
    <div class="col-sm-4 removepadding ">
        <div class="row ">
        </div>

        <div class="card " style="padding-bottom: 55%;">
            <h3 class="card-header">Request A Jitney Ride</h3>
            <div class="card-block">
                <form method="post" asp-controller="RideRequest" asp-action="AddRequest" class="form-horizontal formsize">
                    <div class="form-group">
                        <label asp-for="RiderOrgLoc" class="control-label"></label>
                        <input class="form-control" type="text" asp-for="RiderOrgLoc" id="RiderOrgLoc" />
                        <span asp-validation-for="RiderOrgLoc"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="RiderDestLoc" class="control-label"></label>
                        <input id="RiderDestLoc" class="form-control" type="text" asp-for="RiderDestLoc" />
                        <span asp-validation-for="RiderDestLoc"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="SeatsNeeded" class="btn active"></label>
                        @for (int i = 1; i < 7; i++)
            {

                            <input type="radio" value="@i" asp-for="SeatsNeeded" /> @i
                        }
                        <span asp-validation-for="SeatsNeeded"></span>
                    </div>

                    <div> <input type="hidden" id="rideorglat" value="" asp-for="RiderOrgLat" /></div>
                    <div> <input type="hidden" id="rideorglng" value="" asp-for="RiderOrgLong" /></div>

                    <div><input type="hidden" id="ridedestlat" value="" asp-for="RiderDestLat" /></div>
                    <div><input type="hidden" id="ridedestlng" value="" asp-for="RiderDestLong" /> </div>


                    <input type="submit" value="Request Ride" class="btn btn-default btns" />


                </form>
            </div>




        </div>
    </div>






    <div class="col-8 removepadding ">
        <div id="map" class="removepadding">
        </div>
    </div>

</div>


<script>
    
    function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 44.5520, lng: -69.6317 },
            zoom: 17,
            mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('RiderOrgLoc');
        var searchBox = new google.maps.places.SearchBox(input);
        

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                document.getElementById('rideorglat').value = place.geometry.location.lat();
                document.getElementById('rideorglng').value = place.geometry.location.lng();

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        // Create the search box and link it to the UI element.
        var input2 = document.getElementById('RiderDestLoc');
        var searchBox2 = new google.maps.places.SearchBox(input2);


        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox2.setBounds(map.getBounds());
        });

        var markers2 = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox2.addListener('places_changed', function () {
            var places2 = searchBox2.getPlaces();

            if (places2.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers2.forEach(function (marker) {
                marker.setMap(null);
            });
            markers2 = [];

            // For each place, get the icon, name and location.
            var bounds2 = new google.maps.LatLngBounds();
            places2.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon2 = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon2,
                    title: place.name,
                    position: place.geometry.location
                }));

                document.getElementById('ridedestlat').value = place.geometry.location.lat();
                document.getElementById('ridedestlng').value = place.geometry.location.lng();

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds2.union(place.geometry.viewport);
                } else {
                    bounds2.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds2);
        });
    }

        

  

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC9GgvxCjTBIL1gwHRqTVldYghnlL1tdGA&libraries=places&callback=initAutocomplete"
        async defer></script>

<script>
    $('.container-fluid').addClass('removepadding');
</script>